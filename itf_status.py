# Container Status File Interface
# Author: Deyuan Guo
# Date: Dec 9, 2015

class ContainerStatus:
    def __init__(self):
        # static information
        self.StorageTotal = 0            # (int) MB
        self.PathToSwitch = ''           # (str) path, may be multiple switches
        self.CoresAvailable = 0          # (int) for concurrency available
        self.StorageRBW = 0.0            # (flt) max MB/s
        self.StorageWBW = 0.0            # (flt) max MB/s
        self.StorageRLatency = 0         # (int) min uSec
        self.StorageWLatency = 0         # (int) min uSec
        self.StorageRAIDLevel = 0        # (int) range 0..6
        self.CostPerMB = 0.0             # (flt) allocation units
        self.DataIntegrity = 0           # (int) range 0 to 10**6, 0 is worst
        # dynamic information
        self.StorageReservable = -1      # (int) MB - containers don't know this
        self.StorageUsed = 0             # (int) MB
        self.StorageReliability = 0.01   # (flt) probability of undetected error
        self.ContainerAvailability = 99  # (int) an integer with a presumed leading 0
        self.StorageRBW_dyn = 0          # (int) MB/s. e.g. average bw of past 10 minutes
        self.StorageWBW_dyn = 0          # (int) MB/s. e.g. average bw of past 10 minutes
        # extra information
        self.PhysicalLocation = ''       # (str) hierarchical phisical location

    # Read a status file
    def read_from_file(self, path):
        try:
            with open(path, 'r') as f:
                status = f.read().splitlines()
                for line in status:
                    info = line.split('#')[0].split(',')
                    if len(info) < 2:
                        continue
                    key = info[0].strip()
                    val = info[1].strip()
                    if val == '':
                        continue
                    if key == 'StorageTotal':
                        self.StorageTotal = int(float(val))
                    elif key == 'PathToSwitch':
                        self.PathToSwitch = val
                    elif key == 'CoresAvailable':
                        self.CoresAvailable = int(float(val))
                    elif key == 'StorageRBW':
                        self.StorageRBW = float(val)
                    elif key == 'StorageWBW':
                        self.StorageWBW = float(val)
                    elif key == 'StorageRLatency':
                        self.StorageRLatency = int(float(val))
                    elif key == 'StorageWLatency':
                        self.StorageWLatency = int(float(val))
                    elif key == 'StorageRAIDLevel':
                        self.StorageRAIDLevel = int(float(val))
                    elif key == 'CostPerMB':
                        self.CostPerMB = float(val)
                    elif key == 'DataIntegrity':
                        self.DataIntegrity = int(float(val))
                    elif key == 'StorageReservable':
                        self.StorageReservable = int(float(val))
                    elif key == 'StorageUsed':
                        self.StorageUsed = int(float(val))
                    elif key == 'StorageReliability':
                        self.StorageReliability = float(val)
                    elif key == 'ContainerAvailability':
                        self.ContainerAvailability = int(float(val))
                    elif key == 'StorageRBW_dyn':
                        self.StorageRBW_dyn = int(float(val))
                    elif key == 'StorageWBW_dyn':
                        self.StorageWBW_dyn = int(float(val))
                    elif key == 'PhysicalLocation':
                        self.PhysicalLocation = val
            return True
        except:
            print '[Container Status] Error: Cannot parse' + path
            return False

    # Generate a multi-line string
    def to_string(self):
        status = '# Container status file. Generated by qmsim.\n' \
               + 'StorageTotal'         + ', ' + str(self.StorageTotal         ) + '\n' \
               + 'PathToSwitch'         + ', ' + str(self.PathToSwitch         ) + '\n' \
               + 'CoresAvailable'       + ', ' + str(self.CoresAvailable       ) + '\n' \
               + 'StorageRBW'           + ', ' + str(self.StorageRBW           ) + '\n' \
               + 'StorageWBW'           + ', ' + str(self.StorageWBW           ) + '\n' \
               + 'StorageRLatency'      + ', ' + str(self.StorageRLatency      ) + '\n' \
               + 'StorageWLatency'      + ', ' + str(self.StorageWLatency      ) + '\n' \
               + 'StorageRAIDLevel'     + ', ' + str(self.StorageRAIDLevel     ) + '\n' \
               + 'CostPerMB'            + ', ' + str(self.CostPerMB            ) + '\n' \
               + 'DataIntegrity'        + ', ' + str(self.DataIntegrity        ) + '\n' \
               + 'StorageReservable'    + ', ' + str(self.StorageReservable    ) + '\n' \
               + 'StorageUsed'          + ', ' + str(self.StorageUsed          ) + '\n' \
               + 'StorageReliability'   + ', ' + str(self.StorageReliability   ) + '\n' \
               + 'ContainerAvailability'+ ', ' + str(self.ContainerAvailability) + '\n' \
               + 'StorageRBW_dyn'       + ', ' + str(self.StorageRBW_dyn       ) + '\n' \
               + 'StorageWBW_dyn'       + ', ' + str(self.StorageWBW_dyn       ) + '\n' \
               + 'PhysicalLocation'     + ', ' + str(self.PhysicalLocation     ) + '\n'
        return status

    # Write status to a file
    def write_to_file(self, path):
        try:
            with open(path, 'w') as f:
                status = self.to_string()
                f.write(status)
            return True
        except:
            print '[Container Status] Error: Cannot write to ' + path
            return False

# Testing
if __name__ == '__main__':
    status = ContainerStatus()
    print status.to_string()
    status.write_to_file('temp.txt')
    status.read_from_file('temp.txt')

